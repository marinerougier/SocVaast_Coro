temp_data = map(temp_data, ~ fromJSON(.x))) %>%
unnest()
View(dataset_vaast_trial)
dataset_vaast_browser_event <-
database %>%
pluck("browser_event_corona_en") %>%
map_dfr(~data_frame(epoch = .x$timestamp,
jspsych_id = .x$jspsych_id,
temp_data = .x$event_data,
completion = .x$completion),
.id = "id") %>%
group_by(id) %>%
arrange(desc(epoch)) %>%
filter(row_number() == 1) %>%
ungroup() %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000),
temp_data = map(temp_data, ~ fromJSON(.x))) %>%
unnest()
View(dataset_vaast_browser_event)
dataset_vaast_connection <-
database %>%
pluck("VAAST_corona_en") %>%
map_dfr(~data_frame(data = list(pluck(.x))),
.id = "id")  %>%
unnest()   %>%
mutate(data = map(data, ~data_frame(epoch  = .x$timestamp,
status = .x$status) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000))
)) %>%
unnest()
View(dataset_vaast_connection)
dataset_extra <-
database %>%
pluck("extra_info_corona_en") %>%
map_dfr(~data_frame(epoch = .x$timestamp,
jspsych_id = .x$jspsych_id,
vaast_first_block = .x$vaast_first_block,
temp_data = .x$extra_data),
.id = "id") %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000),
temp_data = map(temp_data, ~ fromJSON(.x))) %>%
unnest()
dataset_extra <-
database %>%
pluck("extra_info_corona_en") %>%
map_dfr(~data_frame(epoch = .x$timestamp,
jspsych_id = .x$jspsych_id,
vaast_first_block = .x$vaast_first_block,
temp_data = .x$extra_data),
.id = "id")
View(dataset_extra)
dataset_questions <-
database %>%
pluck("questions_info_corona_en") %>%
map_dfr(~data_frame(epoch = .x$timestamp,
jspsych_id = .x$jspsych_id,
vaast_first_block = .x$vaast_first_block,
temp_data = .x$questions_data),
.id = "id")
questions_info_corona_en
View(dataset_questions)
# To reset the workspace
rm(list=ls())
# package import ----------------------------------------------------------
library(tidyverse)
library(jsonlite)
library(glue)
library(data.table)
library(magrittr)
# database import ---------------------------------------------------------
database <- fireData::download("https://vaastcoro.firebaseio.com", "/")
# email dataset ---------------------------------------------------
dataset_email <- database %>% pluck("email_contacts") %>% map_dfr(as_tibble)
dataset_email
dataset_vaast_browser_event <-
database %>%
pluck("browser_event_corona_en") %>%
map_dfr(~data_frame(epoch = .x$timestamp,
jspsych_id = .x$jspsych_id,
temp_data = .x$event_data,
completion = .x$completion),
.id = "id") %>%
group_by(id) %>%
arrange(desc(epoch)) %>%
filter(row_number() == 1) %>%
ungroup() %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000),
temp_data = map(temp_data, ~ fromJSON(.x))) %>%
unnest()
dataset_vaast_browser_event <-
database %>%
pluck("browser_event_corona_en") %>%
map_dfr(~data_frame(epoch = .x$timestamp,
jspsych_id = .x$jspsych_id,
temp_data = .x$event_data,
completion = .x$completion),
.id = "id") %>%
group_by(id) %>%
arrange(desc(epoch)) %>%
filter(row_number() == 1) %>%
ungroup() %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000),
temp_data = map(temp_data, ~ fromJSON(.x))) %>%
unnest()
dataset_vaast_browser_event
dataset_extra <- database %>%
pluck("extra_info_corona_en") %>%
map_dfr(~ cbind(
tibble(
epoch = .x$timestamp,
jspsych_id = .x$jspsych_id
),
as_tibble(
.x$extra_data
)
)) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000))
View(dataset_extra)
dataset_questions <- database %>%
pluck("questions_info_corona_en") %>%
map_dfr(~ cbind(
tibble(
epoch = .x$timestamp,
jspsych_id = .x$jspsych_id
),
as_tibble(
.x$questions_data
)
)) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000))
View(dataset_questions)
View(dataset_extra)
# To reset the workspace
rm(list=ls())
# package import ----------------------------------------------------------
library(tidyverse)
library(jsonlite)
library(glue)
library(data.table)
library(magrittr)
# database import ---------------------------------------------------------
database <- fireData::download("https://vaastcoro.firebaseio.com", "/")
# vaast dataset -----------------------------------------------------------
dataset_vaast_trial <-
database %>%
pluck("vaast_trial_corona_en") %>%
map_dfr(~data_frame(
epoch = .x$timestamp,
jspsych_id = .x$jspsych_id,
vaast_first_block = .x$vaast_first_block,
temp_data = .x$vaast_trial_data)
) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000 ), temp_data = map(temp_data, ~ fromJSON(.x))) %>%
unnest()
# email dataset ---------------------------------------------------
dataset_email <- database %>% pluck("email_contacts") %>% map_dfr(as_tibble)
# browser event dataset ---------------------------------------------------
dataset_vaast_browser_event <-
database %>%
pluck("browser_event_corona_en") %>%
map_dfr(~data_frame(epoch = .x$timestamp,
jspsych_id = .x$jspsych_id,
temp_data = .x$event_data,
completion = .x$completion),
.id = "id") %>%
group_by(id) %>%
arrange(desc(epoch)) %>%
filter(row_number() == 1) %>%
ungroup() %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000),
temp_data = map(temp_data, ~ fromJSON(.x))) %>%
unnest()
# connections -------------------------------------------------------------
dataset_vaast_connection <-
database %>%
pluck("VAAST_corona_en") %>%
map_dfr(~data_frame(data = list(pluck(.x))),
.id = "id")  %>%
unnest()   %>%
mutate(data = map(data, ~data_frame(epoch  = .x$timestamp,
status = .x$status) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000))
)) %>%
unnest()
# extra info + questions -------------------------------------------------------------
dataset_extra <- database %>%
pluck("extra_info_corona_en") %>%
map_dfr(~ cbind(
tibble(
epoch = .x$timestamp,
jspsych_id = .x$jspsych_id
),
as_tibble(
.x$extra_data
)
)) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000))
# questions info -------------------------------------------------------------
dataset_questions <- database %>%
pluck("questions_info_corona_en") %>%
map_dfr(~ cbind(
tibble(
epoch = .x$timestamp,
jspsych_id = .x$jspsych_id
),
as_tibble(
.x$questions_data
)
)) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000))
save(dataset_vaast_trial, file = "data_VAAST/data_VAAST.RData")
save(dataset_vaast_browser_event, file = "data_VAAST/data_vaast_browser.RData")
save(dataset_vaast_connection, file = "data_VAAST/data_vaast_connection.RData")
save(dataset_extra, file = "data_VAAST/data_extra.RData")
save(dataset_email, file = "data_VAAST/data_email.RData")
### Workspace -------------------------------------------------------------------
# To reset the workspace
rm(list=ls())
### Loading packages ------------------------------------------------------------
library(plyr)
library(dplyr)
library(gdata)
library(reshape)
library(car)
#library(tidyverse)
library(tidyr)
library(magrittr)
library(data.table)
library(ggplot2) # for the graphics
library(readr)
library(stringr)
library(psych)
library(GPArotation)
library(tidyverse)
# for the confidence intervals
ci.fun <- function (x) {
moe<-qt(0.975, length(x)-1) * sd(x,na.rm=TRUE) / sqrt(length(x))
LI <- mean(x,na.rm=TRUE) - moe
HI <- mean(x,na.rm=TRUE) + moe
Mean <- mean(x,na.rm=TRUE)
CI<-cbind(LI,Mean,HI)
colnames(CI)<-c("2.5%","Mean","97.5%")
row.names(CI)<-deparse(substitute(x))
CI
}
# Left Outter Join
LOT <- function(X = NULL, Y = NULL, onCol = NULL) {
giveExemple <- is.null(X) & is.null(Y) & is.null(onCol)
if (giveExemple) {
cat("\nExemple:")
cat("\n>X\n")
X <- data.table(id = 1:5, L = letters[1:5]) %T>% print
cat("\n>Y\n")
Y <- data.table(id = 3:5, L = c(NA, "g", "h"), N = c(10, NA, 12)) %T>% print
onCol <- "id"
cat('\nLOT(X, Y, "id")\n')
}
n <- names(Y)
X[Y, (n) := mget(paste0("i.", n)), on = onCol]
if (giveExemple) {cat(">X\n"); print(X)}
}
# Ensure that relative paths start from the same directory as this script
rstudioapi::getActiveDocumentContext()$path %>% dirname %>% setwd
#-----------------------------------------------------------
#                     VAAST
#-----------------------------------------------------------
### Data files import and dataset formating -----------------------------------------------------------
load("Data_VAAST/data_VAAST.RData")
DF <- data.table(dataset_vaast_trial)
# To reset the workspace
rm(list=ls())
# package import ----------------------------------------------------------
library(tidyverse)
library(jsonlite)
library(glue)
library(data.table)
library(magrittr)
# database import ---------------------------------------------------------
database <- fireData::download("https://vaastcoro.firebaseio.com", "/")
# vaast dataset -----------------------------------------------------------
dataset_vaast_trial <-
database %>%
pluck("vaast_trial_corona_en") %>%
map_dfr(~data_frame(
epoch = .x$timestamp,
jspsych_id = .x$jspsych_id,
vaast_first_block = .x$vaast_first_block,
temp_data = .x$vaast_trial_data)
) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000 ), temp_data = map(temp_data, ~ fromJSON(.x))) %>%
unnest()
# email dataset ---------------------------------------------------
dataset_email <- database %>% pluck("email_contacts") %>% map_dfr(as_tibble)
# browser event dataset ---------------------------------------------------
dataset_vaast_browser_event <-
database %>%
pluck("browser_event_corona_en") %>%
map_dfr(~data_frame(epoch = .x$timestamp,
jspsych_id = .x$jspsych_id,
temp_data = .x$event_data,
completion = .x$completion),
.id = "id") %>%
group_by(id) %>%
arrange(desc(epoch)) %>%
filter(row_number() == 1) %>%
ungroup() %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000),
temp_data = map(temp_data, ~ fromJSON(.x))) %>%
unnest()
# connections -------------------------------------------------------------
dataset_vaast_connection <-
database %>%
pluck("VAAST_corona_en") %>%
map_dfr(~data_frame(data = list(pluck(.x))),
.id = "id")  %>%
unnest()   %>%
mutate(data = map(data, ~data_frame(epoch  = .x$timestamp,
status = .x$status) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000))
)) %>%
unnest()
# extra info + questions -------------------------------------------------------------
dataset_extra <- database %>%
pluck("extra_info_corona_en") %>%
map_dfr(~ cbind(
tibble(
epoch = .x$timestamp,
jspsych_id = .x$jspsych_id
),
as_tibble(
.x$extra_data
)
)) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000))
# questions info -------------------------------------------------------------
dataset_questions <- database %>%
pluck("questions_info_corona_en") %>%
map_dfr(~ cbind(
tibble(
epoch = .x$timestamp,
jspsych_id = .x$jspsych_id
),
as_tibble(
.x$questions_data
)
)) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000))
# Saving as more regular files -----------------------------------------------
save(dataset_vaast_trial, file = "data_VAAST/data_VAAST.RData")
save(dataset_vaast_browser_event, file = "data_VAAST/data_vaast_browser.RData")
save(dataset_vaast_connection, file = "data_VAAST/data_vaast_connection.RData")
save(dataset_extra, file = "data_VAAST/data_extra.RData")
save(dataset_questions, file = "data_VAAST/data_questions.RData")
save(dataset_email, file = "data_VAAST/data_email.RData")
### Data files import and dataset formating -----------------------------------------------------------
load("Data_VAAST/data_VAAST.RData")
DF <- data.table(dataset_vaast_trial)
# # Loading the browser info to remove pp who did not complete the whole expe
load("Data_VAAST/data_extra.RData")
data_browser <- data.table(dataset_vaast_browser_event)
#
# # Merging VAAST with completion infos
# LOT(DF, data_browser, "id")
# Defining some variabls as factors.
DF$jspsych_id  <- factor(DF$jspsych_id)
DF$Stimuli  <- factor(DF$stimulus)
DF$Movement <- factor(DF$movement)
DF$Group  <- factor(DF$group)
load("Data_VAAST/data_VAAST.RData")
DF <- data.table(dataset_vaast_trial)
# # Loading the browser info to remove pp who did not complete the whole expe
load("Data_VAAST/data_extra.RData")
data_extra <- data.table(dataset_extra)
data_extra
# Merging VAAST with other infos
LOT(DF, data_extra, "id")
### Workspace -------------------------------------------------------------------
# To reset the workspace
rm(list=ls())
### Loading packages ------------------------------------------------------------
library(plyr)
library(dplyr)
library(gdata)
library(reshape)
library(car)
#library(tidyverse)
library(tidyr)
library(magrittr)
library(data.table)
library(ggplot2) # for the graphics
library(readr)
library(stringr)
library(psych)
library(GPArotation)
library(tidyverse)
# for the confidence intervals
ci.fun <- function (x) {
moe<-qt(0.975, length(x)-1) * sd(x,na.rm=TRUE) / sqrt(length(x))
LI <- mean(x,na.rm=TRUE) - moe
HI <- mean(x,na.rm=TRUE) + moe
Mean <- mean(x,na.rm=TRUE)
CI<-cbind(LI,Mean,HI)
colnames(CI)<-c("2.5%","Mean","97.5%")
row.names(CI)<-deparse(substitute(x))
CI
}
# Left Outter Join
LOT <- function(X = NULL, Y = NULL, onCol = NULL) {
giveExemple <- is.null(X) & is.null(Y) & is.null(onCol)
if (giveExemple) {
cat("\nExemple:")
cat("\n>X\n")
X <- data.table(id = 1:5, L = letters[1:5]) %T>% print
cat("\n>Y\n")
Y <- data.table(id = 3:5, L = c(NA, "g", "h"), N = c(10, NA, 12)) %T>% print
onCol <- "id"
cat('\nLOT(X, Y, "id")\n')
}
n <- names(Y)
X[Y, (n) := mget(paste0("i.", n)), on = onCol]
if (giveExemple) {cat(">X\n"); print(X)}
}
# Ensure that relative paths start from the same directory as this script
rstudioapi::getActiveDocumentContext()$path %>% dirname %>% setwd
#-----------------------------------------------------------
#                     VAAST
#-----------------------------------------------------------
### Data files import and dataset formating -----------------------------------------------------------
load("Data_VAAST/data_VAAST.RData")
DF <- data.table(dataset_vaast_trial)
# # Loading the browser info to remove pp who did not complete the whole expe
load("Data_VAAST/data_extra.RData")
data_extra <- data.table(dataset_extra)
# Merging VAAST with other infos
LOT(DF, data_extra, "id")
# Merging VAAST with other infos
LOT(DF, data_extra, "jspsych_id")
View(DF)
# we remove the other positions having no meaning
DF <- subset (DF, key_press != "NA")
xtabs(~Stimuli + jspsych_id, DF)
# Defining some variabls as factors.
DF$jspsych_id  <- factor(DF$jspsych_id)
DF$Stimuli  <- factor(DF$stimulus)
DF$Movement <- factor(DF$movement)
DF$Group  <- factor(DF$group)
### Cleaning dataset and Data exclusion ------------------------------------------------------------
# we remove the other positions having no meaning
DF <- subset (DF, key_press != "NA")
xtabs(~Stimuli + jspsych_id, DF)
# removing pp who did not complete the whole expe
Complete <- data.frame(table(DF$jspsych_id))
Complete <- rename.vars (Complete, c("Var1","Freq"), c("jspsych_id","Num_trial"))
LOT(DF, Complete, "jspsych_id")
Complete
# To reset the workspace
rm(list=ls())
# package import ----------------------------------------------------------
library(tidyverse)
library(jsonlite)
library(glue)
library(data.table)
library(magrittr)
# database import ---------------------------------------------------------
database <- fireData::download("https://vaastcoro.firebaseio.com", "/")
# vaast dataset -----------------------------------------------------------
dataset_vaast_trial <-
database %>%
pluck("vaast_trial_corona_en") %>%
map_dfr(~data_frame(
epoch = .x$timestamp,
jspsych_id = .x$jspsych_id,
vaast_first_block = .x$vaast_first_block,
temp_data = .x$vaast_trial_data)
) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000 ), temp_data = map(temp_data, ~ fromJSON(.x))) %>%
unnest()
# email dataset ---------------------------------------------------
dataset_email <- database %>% pluck("email_contacts") %>% map_dfr(as_tibble)
dataset_email
# browser event dataset ---------------------------------------------------
dataset_vaast_browser_event <-
database %>%
pluck("browser_event_corona_en") %>%
map_dfr(~data_frame(epoch = .x$timestamp,
jspsych_id = .x$jspsych_id,
temp_data = .x$event_data,
completion = .x$completion),
.id = "id") %>%
group_by(id) %>%
arrange(desc(epoch)) %>%
filter(row_number() == 1) %>%
ungroup() %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000),
temp_data = map(temp_data, ~ fromJSON(.x))) %>%
unnest()
dataset_vaast_browser_event
# extra info + questions -------------------------------------------------------------
dataset_extra <- database %>%
pluck("extra_info_corona_en") %>%
map_dfr(~ cbind(
tibble(
epoch = .x$timestamp,
jspsych_id = .x$jspsych_id
),
as_tibble(
.x$extra_data
)
)) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000))
dataset_extra
View(dataset_extra)
